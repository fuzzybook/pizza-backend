package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"encoding/json"
	"pizza-backend/common"
	"pizza-backend/models"
)

// Ingredients is the resolver for the Ingredients field.
func (r *menuResolver) Ingredients(ctx context.Context, obj *models.Menu) ([]*models.MenuIngredient, error) {
	context := common.GetContext(ctx)
	ingredients := []*models.MenuIngredient{}
	err := context.Database.Order("priority").Find(&ingredients).Error
	if err != nil {
		return nil, err
	}
	return ingredients, nil
}

// Doughs is the resolver for the Doughs field.
func (r *menuResolver) Doughs(ctx context.Context, obj *models.Menu) ([]*models.MenuDough, error) {
	context := common.GetContext(ctx)
	doughs := []*models.MenuDough{}
	err := context.Database.Order("priority").Find(&doughs).Error
	if err != nil {
		return nil, err
	}
	return doughs, nil
}

// Condiments is the resolver for the Condiments field.
func (r *menuResolver) Condiments(ctx context.Context, obj *models.Menu) ([]*models.MenuCondiment, error) {
	context := common.GetContext(ctx)
	condiments := []*models.MenuCondiment{}
	err := context.Database.Find(&condiments).Error
	if err != nil {
		return nil, err
	}
	return condiments, nil
}

// Categories is the resolver for the Categories field.
func (r *menuResolver) Categories(ctx context.Context, obj *models.Menu) ([]*models.MenuCategory, error) {
	return models.GetMenuCategories(ctx, obj)
}

// Categories is the resolver for the categories field.
func (r *menuCondimentResolver) Categories(ctx context.Context, obj *models.MenuCondiment) ([]*models.MenuDataCategory, error) {
	categories := []*models.MenuDataCategory{}
	for _, v := range obj.Categories {
		val := v
		categories = append(categories, &val)
	}
	return categories, nil
}

// Categories is the resolver for the categories field.
func (r *menuDoughResolver) Categories(ctx context.Context, obj *models.MenuDough) ([]*models.MenuDataCategory, error) {
	categories := []*models.MenuDataCategory{}
	for _, v := range obj.Categories {
		val := v
		categories = append(categories, &val)
	}
	return categories, nil
}

// Categories is the resolver for the categories field.
func (r *menuIngredientResolver) Categories(ctx context.Context, obj *models.MenuIngredient) ([]*models.MenuDataCategory, error) {
	categories := []*models.MenuDataCategory{}
	for _, v := range obj.Categories {
		val := v
		categories = append(categories, &val)
	}
	return categories, nil
}

// Dirty is the resolver for the dirty field.
func (r *menuItemResolver) Dirty(ctx context.Context, obj *models.MenuItem) (bool, error) {
	return false, nil
}

// Categories is the resolver for the categories field.
func (r *updateCondimentResolver) Categories(ctx context.Context, obj *models.UpdateCondiment, data string) error {
	err := json.Unmarshal([]byte(data), &obj.Categories)
	if err != nil {
		return err
	}
	return nil
}

// Categories is the resolver for the categories field.
func (r *updateDoughResolver) Categories(ctx context.Context, obj *models.UpdateDough, data string) error {
	err := json.Unmarshal([]byte(data), &obj.Categories)
	if err != nil {
		return err
	}
	return nil
}

// Categories is the resolver for the categories field.
func (r *updateIngredientResolver) Categories(ctx context.Context, obj *models.UpdateIngredient, data string) error {
	err := json.Unmarshal([]byte(data), &obj.Categories)
	if err != nil {
		return err
	}
	return nil
}

// Menu returns MenuResolver implementation.
func (r *Resolver) Menu() MenuResolver { return &menuResolver{r} }

// MenuCondiment returns MenuCondimentResolver implementation.
func (r *Resolver) MenuCondiment() MenuCondimentResolver { return &menuCondimentResolver{r} }

// MenuDough returns MenuDoughResolver implementation.
func (r *Resolver) MenuDough() MenuDoughResolver { return &menuDoughResolver{r} }

// MenuIngredient returns MenuIngredientResolver implementation.
func (r *Resolver) MenuIngredient() MenuIngredientResolver { return &menuIngredientResolver{r} }

// MenuItem returns MenuItemResolver implementation.
func (r *Resolver) MenuItem() MenuItemResolver { return &menuItemResolver{r} }

// UpdateCondiment returns UpdateCondimentResolver implementation.
func (r *Resolver) UpdateCondiment() UpdateCondimentResolver { return &updateCondimentResolver{r} }

// UpdateDough returns UpdateDoughResolver implementation.
func (r *Resolver) UpdateDough() UpdateDoughResolver { return &updateDoughResolver{r} }

// UpdateIngredient returns UpdateIngredientResolver implementation.
func (r *Resolver) UpdateIngredient() UpdateIngredientResolver { return &updateIngredientResolver{r} }

type menuResolver struct{ *Resolver }
type menuCondimentResolver struct{ *Resolver }
type menuDoughResolver struct{ *Resolver }
type menuIngredientResolver struct{ *Resolver }
type menuItemResolver struct{ *Resolver }
type updateCondimentResolver struct{ *Resolver }
type updateDoughResolver struct{ *Resolver }
type updateIngredientResolver struct{ *Resolver }
