package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"bytes"
	"context"
	"encoding/base64"
	"fmt"
	"image/jpeg"
	"image/png"
	"log"
	"os"
	"path/filepath"
	"pizza-backend/models"
	"strings"

	"github.com/99designs/gqlgen/graphql"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input models.NewUser) (*models.User, error) {
	return models.CreateUser(ctx, input)
}

// UpdateUserRoles is the resolver for the updateUserRoles field.
func (r *mutationResolver) UpdateUserRoles(ctx context.Context, input models.UpdateUserRoles) (*models.User, error) {
	return models.UpdateRoles(ctx, input)
}

// UpdateUserPassword is the resolver for the updateUserPassword field.
func (r *mutationResolver) UpdateUserPassword(ctx context.Context, input models.UpdateUserPassword) (*models.User, error) {
	return models.UpdatePassword(ctx, input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input models.UserLogin) (*models.Session, error) {
	return models.Login(ctx, input)
}

// DeleteMenuIngredient is the resolver for the deleteMenuIngredient field.
func (r *mutationResolver) DeleteMenuIngredient(ctx context.Context, input models.DeleteIngredient) (bool, error) {
	return models.DeleteMenuIngredient(ctx, input)
}

// UpdateMenuIngredient is the resolver for the updateMenuIngredient field.
func (r *mutationResolver) UpdateMenuIngredient(ctx context.Context, input models.UpdateIngredient) (*models.MenuIngredient, error) {
	return models.UpdateMenuIngredient(ctx, input)
}

// UpdateMenuIngredients is the resolver for the updateMenuIngredients field.
func (r *mutationResolver) UpdateMenuIngredients(ctx context.Context, input []*models.UpdateIngredient) ([]*models.MenuIngredient, error) {
	return models.UpdateMenuIngredients(ctx, input)
}

// DeleteMenuDough is the resolver for the deleteMenuDough field.
func (r *mutationResolver) DeleteMenuDough(ctx context.Context, input models.DeleteDough) (bool, error) {
	return models.DeleteMenuDough(ctx, input)
}

// UpdateMenuDough is the resolver for the updateMenuDough field.
func (r *mutationResolver) UpdateMenuDough(ctx context.Context, input models.UpdateDough) (*models.MenuDough, error) {
	return models.UpdateMenuDough(ctx, input)
}

// UpdateMenuDoughs is the resolver for the updateMenuDoughs field.
func (r *mutationResolver) UpdateMenuDoughs(ctx context.Context, input []*models.UpdateDough) ([]*models.MenuDough, error) {
	return models.UpdateMenuDoughs(ctx, input)
}

// DeleteMenuCondiment is the resolver for the deleteMenuCondiment field.
func (r *mutationResolver) DeleteMenuCondiment(ctx context.Context, input models.DeleteCondiment) (bool, error) {
	return models.DeleteMenuCondiment(ctx, input)
}

// UpdateMenuCondiment is the resolver for the updateMenuCondiment field.
func (r *mutationResolver) UpdateMenuCondiment(ctx context.Context, input models.UpdateCondiment) (*models.MenuCondiment, error) {
	return models.UpdateMenuCondiment(ctx, input)
}

// UpdateMenuCondiments is the resolver for the updateMenuCondiments field.
func (r *mutationResolver) UpdateMenuCondiments(ctx context.Context, input []*models.UpdateCondiment) ([]*models.MenuCondiment, error) {
	return models.UpdateMenuCondiments(ctx, input)
}

// DeleteMenuCategory is the resolver for the deleteMenuCategory field.
func (r *mutationResolver) DeleteMenuCategory(ctx context.Context, input models.DeleteCategory) (bool, error) {
	return models.DeleteMenuCategory(ctx, input)
}

// UpdateMenuCategory is the resolver for the updateMenuCategory field.
func (r *mutationResolver) UpdateMenuCategory(ctx context.Context, input *models.UpdateCategory) (*models.MenuCategory, error) {
	return models.UpdateMenuCategory(ctx, input)
}

// DeleteMenuCategoryItem is the resolver for the deleteMenuCategoryItem field.
func (r *mutationResolver) DeleteMenuCategoryItem(ctx context.Context, input *models.UpdateCategoryItem) (bool, error) {
	return models.DeleteMenuCategoryItem(ctx, input)
}

// UpdateMenuCategoryItem is the resolver for the updateMenuCategoryItem field.
func (r *mutationResolver) UpdateMenuCategoryItem(ctx context.Context, input *models.UpdateCategoryItem) (*models.MenuItem, error) {
	return models.UpdateMenuCategoryItem(ctx, input)
}

// UploadMenuImage is the resolver for the UploadMenuImage field.
func (r *mutationResolver) UploadMenuImage(ctx context.Context, file graphql.Upload) (bool, error) {
	fmt.Println(file)
	return true, nil
}

// SaveMenuImage is the resolver for the saveMenuImage field.
func (r *mutationResolver) SaveMenuImage(ctx context.Context, input models.SaveImage) (*string, error) {
	a := strings.Split(input.Image, ",")

	myReader := base64.NewDecoder(base64.StdEncoding, strings.NewReader(a[1]))

	fmt.Println(input.Image[5:strings.IndexByte(input.Image, ';')])

	switch input.Image[5:strings.IndexByte(input.Image, ';')] {
	case "image/png":
		img, err := png.Decode(myReader)
		if err != nil {
			fmt.Println(err)
		}
		dir, err := os.Getwd()
		if err != nil {
			log.Fatal(err)
		}
		buf := new(bytes.Buffer)
		err = png.Encode(buf, img)
		if err != nil {
			log.Fatal(err)
		}
		id := input.Uuid
		file := filepath.Join(dir, "STORAGE/IMAGES", id+".png")
		err = os.WriteFile(file, buf.Bytes(), 0644)
		if err != nil {
			log.Fatal(err)
		}

		fmt.Println(img)
		// ...
	case "image/jpeg":
		img, err := jpeg.Decode(myReader)
		if err != nil {
			fmt.Println(img)
		}
		fmt.Println(err)
		// ...
	}
	fmt.Println(input.Image)
	result := ""
	return &result, nil
}

// UpdateMenuItemPromo is the resolver for the updateMenuItemPromo field.
func (r *mutationResolver) UpdateMenuItemPromo(ctx context.Context, promo bool, id int) (bool, error) {
	return models.UpdateMenuItemPromo(ctx, promo, id)
}

// PutOrder is the resolver for the putOrder field.
func (r *mutationResolver) PutOrder(ctx context.Context, data string, email string, phone string) (bool, error) {
	return true, nil
}

// SaveTimes is the resolver for the saveTimes field.
func (r *mutationResolver) SaveTimes(ctx context.Context, times string) (bool, error) {
	return models.SaveTimes(ctx, times)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
