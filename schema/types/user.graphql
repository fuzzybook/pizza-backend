directive @hasRole(roles: [UserRole!]!) on FIELD_DEFINITION
directive @needAuth(need:Boolean) on FIELD_DEFINITION

type User @goModel(model: "pizza-backend/models.User") {
  id: Int!
  uuid: String
  email: String!
  name: String!
  roles: [UserRole!]!
  status: UserStatus!
  types: UserType!
  details: UserDetails
  preferences: UserPreferences
  avatar: String
  activatedAt: Time
}

type UserPreferences {
  useIdle: Boolean
  idleTimeout: Int
  useIdlePassword: Boolean
  idlePin: String
  useDirectLogin: Boolean
  useQuadcodeLogin: Boolean
  sendNoticesMail: Boolean
  language: String
}

type UserSocials {
  website: String
  twitter: String
  linkedin: String
  instagram: String
  facebook: String
  youtube: String
}

type UserDetails {
  id: Int!
  title: String!
  firstName: String!
  lastName: String!
  address: String
  city: String
  zipCode: String
  country: String
  phone: String
}

type Session {
  recoveryToken: String!
  firedAt: Time
  user: User! @goField(forceResolver: true)
}

type LogoutResult{
  ok: Boolean
}

enum UserType {
  SYSTEM
  SITE
  AUTHOR
}

enum UserStatus {
  AWAITING
  PENDING
  ACTIVE
  BLOCKED
  BANNED
}

enum UserRole {
  ADMIN
  USER
  MUSICMANAGER
}

input NewUser @goModel(model: "pizza-backend/models.NewUser") {
  name: String!
  email: String!
  roles: [UserRole!]!
  type: UserType!
  password: String!
}

input UpdateUserRoles @goModel(model: "pizza-backend/models.UpdateUserRoles") {
  userId: Int!
  roles: [UserRole!]!
}

input UpdateUserPassword
  @goModel(model: "pizza-backend/models.UpdateUserPassword") {
  userId: Int!
  password: String!
}

input UserLogin @goModel(model: "pizza-backend/models.UserLogin") {
  email: String!
  password: String!
}

input UserPages @goModel(model: "pizza-backend/models.UserPages") {
  page: Int!
  pageSize: Int!
  sortBy: String
  descending: Boolean
}

type UserPagesResponse {
  page: Int!
  pageSize: Int!
  count: Int!
  users: [User]
}
